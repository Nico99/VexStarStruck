#pragma config(Sensor, in8,    actuatPoten,    sensorPotentiometer)
#pragma config(Sensor, dgtl1,  rightLimit,     sensorTouch)
#pragma config(Sensor, dgtl2,  rightLower,     sensorTouch)
#pragma config(Sensor, dgtl11, leftLower,      sensorTouch)
#pragma config(Sensor, dgtl12, leftLimit,      sensorTouch)
#pragma config(Motor,  port1,           rightBack,     tmotorVex393, openLoop)
#pragma config(Motor,  port2,           rightFront,    tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port3,           rightLift,     tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port4,           claw,          tmotorVex269, openLoop)
#pragma config(Motor,  port5,           actuator,      tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port8,           leftLift,      tmotorVex393, openLoop)
#pragma config(Motor,  port9,           leftFront,     tmotorVex393, openLoop)
#pragma config(Motor,  port10,          leftBack,      tmotorVex393, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
/*


    _/_/_/_/                                             _/          _/
   _/            _/    _/      _/_/_/        _/_/_/   _/_/_/_/                _/_/       _/_/_/         _/_/_/
  _/_/_/        _/    _/      _/    _/    _/           _/          _/      _/    _/     _/    _/     _/_/
 _/            _/    _/      _/    _/    _/           _/          _/      _/    _/     _/    _/         _/_/
_/              _/_/_/      _/    _/      _/_/_/       _/_/      _/        _/_/       _/    _/     _/_/_/

*/

/*

reverse both backs of motors
*/


void resetMotors() {
  motor[rightFront] = 0;
	motor[rightBack]  = 0;
	motor[leftBack] = 0;
	motor[leftBack] = 0;
	motor[leftLiftBack] = 0;
	motor[leftLiftFront] = 0;
	motor[rightLiftBack] = 0;
	motor[rightLiftFront] = 0;
}

//robot should move in linear direction with power and milliseconds
void linearMove(int power, int milliSec) {
	motor[rightFront] = power;
	motor[rightBack]  = power;
	motor[leftFront] = power;
	motor[leftBack] = power;
	wait1Msec(milliSec);
	resetMotors();
}

void turnDirec(string direction, int power, int milliSec) {
    if(direction == "left") {
        linearMove(-power, milliSec);
  	}
  	if(direction == "right") {
  	 	linearMove(power, milliSec);
    }
}

void smoothTurn(string direction, int power, int milliSec) {
	if(direction == "right") {
			motor[leftBack] = power;
			motor[leftFront] = power;
			motor[rightBack] = power/2;
			motor[rightFront] = power/2;
			wait1Msec(milliSec);
			resetMotors();
	}
	if(direction == "left") {
			motor[leftBack] = power/2;
			motor[leftFront] = power/2;
			motor[rightBack] = power;
			motor[rightFront] = power;
			wait1Msec(milliSec);
			resetMotors();
	}

}

void arcTurnDirec(string direction, int power, int milliSec) {
		smoothTurn(direction, power, milliSec);
}


/**
Lift motors
*/
void lift(int time, int milli) {
		//motor[
}
